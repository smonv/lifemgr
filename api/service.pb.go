// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GetNutrientsResponse struct {
	Nutrients []*Nutrient `protobuf:"bytes,1,rep,name=nutrients" json:"nutrients,omitempty"`
}

func (m *GetNutrientsResponse) Reset()                    { *m = GetNutrientsResponse{} }
func (m *GetNutrientsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetNutrientsResponse) ProtoMessage()               {}
func (*GetNutrientsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *GetNutrientsResponse) GetNutrients() []*Nutrient {
	if m != nil {
		return m.Nutrients
	}
	return nil
}

func init() {
	proto.RegisterType((*GetNutrientsResponse)(nil), "GetNutrientsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for API service

type APIClient interface {
	GetNutrients(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*GetNutrientsResponse, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) GetNutrients(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*GetNutrientsResponse, error) {
	out := new(GetNutrientsResponse)
	err := grpc.Invoke(ctx, "/API/GetNutrients", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for API service

type APIServer interface {
	GetNutrients(context.Context, *google_protobuf.Empty) (*GetNutrientsResponse, error)
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_GetNutrients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetNutrients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/API/GetNutrients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetNutrients(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNutrients",
			Handler:    _API_GetNutrients_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 191 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x97, 0x92, 0x4e, 0xcf, 0xcf, 0x4f, 0xcf,
	0x49, 0xd5, 0x07, 0xf3, 0x92, 0x4a, 0xd3, 0xf4, 0x53, 0x73, 0x0b, 0x4a, 0x2a, 0xa1, 0x92, 0x32,
	0x50, 0xc9, 0xc4, 0x82, 0x4c, 0xfd, 0xc4, 0xbc, 0xbc, 0xfc, 0x92, 0xc4, 0x92, 0xcc, 0xfc, 0xbc,
	0x62, 0xa8, 0x2c, 0x5f, 0x5e, 0x69, 0x49, 0x51, 0x66, 0x6a, 0x5e, 0x09, 0x84, 0xaf, 0x64, 0xcf,
	0x25, 0xe2, 0x9e, 0x5a, 0xe2, 0x07, 0x15, 0x2c, 0x0e, 0x4a, 0x2d, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e,
	0x15, 0x52, 0xe7, 0xe2, 0x84, 0xa9, 0x2c, 0x96, 0x60, 0x54, 0x60, 0xd6, 0xe0, 0x36, 0xe2, 0xd4,
	0x83, 0x29, 0x0b, 0x42, 0xc8, 0x19, 0x45, 0x73, 0x31, 0x3b, 0x06, 0x78, 0x0a, 0x85, 0x70, 0xf1,
	0x20, 0x9b, 0x23, 0x24, 0xa6, 0x07, 0x71, 0x86, 0x1e, 0xcc, 0x8d, 0x7a, 0xae, 0x20, 0x37, 0x4a,
	0x89, 0xea, 0x61, 0xb3, 0x4e, 0x49, 0xb4, 0xe9, 0xf2, 0x93, 0xc9, 0x4c, 0xfc, 0x42, 0xbc, 0xfa,
	0x65, 0x86, 0xfa, 0x70, 0xc3, 0x9d, 0x58, 0xa3, 0x98, 0x13, 0x0b, 0x32, 0x93, 0xd8, 0xc0, 0x86,
	0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x01, 0x91, 0xfe, 0x63, 0x07, 0x01, 0x00, 0x00,
}
